{"version":3,"sources":["components/Drawing.js","components/Word.js","components/Key.js","components/Keyboard.js","components/GuessWord.js","components/GameOver.js","components/Welcome.js","App.js","reportWebVitals.js","index.js"],"names":["StyledDrawing","styled","div","Base","props","visible","Stand","AcrossBeam","TopBar","Noose","Head","Body","LeftArm","RightArm","LeftLeg","RightLeg","Drawing","livesLeft","StyledWord","Letter","Word","currentResult","map","letter","index","StyledKey","button","Key","value","checkIfKeyMatches","isGameOver","useState","isKeyDisabled","setIsKeyDisabled","useEffect","disabled","onClick","handleClick","firstRowKeys","secondRowKeys","thirdRowKeys","StyledKeyboard","KeyboardRow","Keyboard","key","StyledGuessWord","form","GuessInput","input","SubmitButton","ErrorMessage","span","GuessWord","checkGuess","guess","setGuess","errorMessage","setErrorMessage","previousGuesses","setPreviousGuesses","inputPattern","RegExp","isGuessValid","test","isGuessNew","includes","toUpperCase","onSubmit","e","preventDefault","placeholder","onChange","target","StyledGameOver","Message","h1","gameOutcome","RevealWord","p","PlayAgainButton","GameOver","startNewGame","gameOverMessage","chosenWord","StyledWelcome","Title","PlayButton","Welcome","setIsWelcomeScreenVisible","App","correctlyGuessedLetters","randomWords","setRandomWords","isWelcomeScreenVisible","setChosenWord","setCurrentResult","setLivesLeft","setIsGameOver","setGameOutcome","setGameOverMessage","indexOfChosenWord","Math","floor","random","length","updateRandomWords","i","push","updatedRandomWords","splice","gameOver","result","join","className","matchesFound","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"m5IAGA,IAAMA,EAAgBC,IAAOC,IAAV,KAMbC,EAAOF,IAAOC,IAAV,KAKK,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAGpC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDC,EAAQL,IAAOC,IAAV,KAMK,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAErC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDE,EAAaN,IAAOC,IAAV,KAMA,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAIrC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDG,EAASP,IAAOC,IAAV,KAMG,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAEpC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDI,EAAQR,IAAOC,IAAV,KAMK,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAErC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDK,EAAOT,IAAOC,IAAV,KASM,SAACE,GAAD,OAAYA,EAAMC,QAAU,UAAY,YACzC,SAACD,GAAD,OACXA,EAAMC,QAAU,gCAAkC,MA0BhDM,EAAOV,IAAOC,IAAV,KAMM,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAErC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDO,EAAUX,IAAOC,IAAV,KAMG,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAIrC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDQ,EAAWZ,IAAOC,IAAV,KAME,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAIrC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDS,EAAUb,IAAOC,IAAV,KAMG,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAIrC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIlDU,EAAWd,IAAOC,IAAV,KAME,SAACE,GAAD,OAAYA,EAAMC,QAAU,OAAS,KAIrC,SAACD,GAAD,OAAYA,EAAMC,QAAU,UAAY,YAIzC,SAASW,EAAT,GAAiC,IAAdC,EAAa,EAAbA,UAChC,OACE,eAACjB,EAAD,WACE,cAACG,EAAD,CAAME,QAASY,EAAY,KAC3B,cAACX,EAAD,CAAOD,QAASY,EAAY,KAC5B,cAACT,EAAD,CAAQH,QAASY,EAAY,IAC7B,cAACV,EAAD,CAAYF,QAASY,EAAY,IACjC,cAACR,EAAD,CAAOJ,QAASY,EAAY,IAC5B,cAACP,EAAD,CAAML,QAASY,EAAY,IAC3B,cAACN,EAAD,CAAMN,QAASY,EAAY,IAC3B,cAACL,EAAD,CAASP,QAASY,EAAY,IAC9B,cAACJ,EAAD,CAAUR,QAASY,EAAY,IAC/B,cAACH,EAAD,CAAST,QAASY,EAAY,IAC9B,cAACF,EAAD,CAAUV,QAASY,EAAY,O,uXC1LrC,IAAMC,EAAajB,IAAOC,IAAV,KAKViB,EAASlB,IAAOC,IAAV,KAYG,SAASkB,EAAT,GAAkC,IAAlBC,EAAiB,EAAjBA,cAC7B,OACE,cAACH,EAAD,UACGG,EAAcC,KAAI,SAACC,EAAQC,GAAT,OACjB,cAACL,EAAD,UAAqBI,GAARC,Q,0+BCrBrB,IAAMC,EAAYxB,IAAOyB,OAAV,KAmDA,SAASC,EAAT,GAAwD,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,kBAAmBC,EAAc,EAAdA,WAAc,EAC1BC,oBAAS,GADiB,mBAC7DC,EAD6D,KAC9CC,EAD8C,KAcpE,OANAC,qBAAU,YACW,IAAfJ,GACFG,GAAiB,KAElB,CAACH,IAGF,cAACL,EAAD,CAAWU,SAAUH,EAAeI,QAAS,kBAZ3B,SAACR,GACnBC,EAAkBD,GAClBK,GAAiB,GAUkCI,CAAYT,IAA/D,SACGA,I,wWClEP,IAAMU,EAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7DC,EAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzDC,EAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE9CC,EAAiBxC,IAAOC,IAAV,KAOdwC,EAAczC,IAAOC,IAAV,KAWF,SAASyC,EAAT,GAAsD,IAAlCd,EAAiC,EAAjCA,kBAAmBC,EAAc,EAAdA,WACpD,OACE,eAACW,EAAD,WACE,cAACC,EAAD,UACGJ,EAAahB,KAAI,SAACsB,GAAD,OAChB,cAACjB,EAAD,CACEG,WAAYA,EACZD,kBAAmBA,EAEnBD,MAAOgB,EAJT,SAMGA,GAHIA,QAQX,cAACF,EAAD,UACGH,EAAcjB,KAAI,SAACsB,GAAD,OACjB,cAACjB,EAAD,CACEG,WAAYA,EACZD,kBAAmBA,EAEnBD,MAAOgB,GADFA,QAMX,cAACF,EAAD,UACGF,EAAalB,KAAI,SAACsB,GAAD,OAChB,cAACjB,EAAD,CACEG,WAAYA,EACZD,kBAAmBA,EAEnBD,MAAOgB,GADFA,W,gxBCvDjB,IAAMC,GAAkB5C,IAAO6C,KAAV,MAOfC,GAAa9C,IAAO+C,MAAV,MAMVC,GAAehD,IAAOyB,OAAV,MAeZwB,GAAejD,IAAOkD,KAAV,KAQH,SAASC,GAAT,GAAgD,IAA3BC,EAA0B,EAA1BA,WAAYvB,EAAc,EAAdA,WAAc,EAClCC,mBAAS,IADyB,mBACrDuB,EADqD,KAC9CC,EAD8C,OAEpBxB,mBAAS,IAFW,mBAErDyB,EAFqD,KAEvCC,EAFuC,OAGd1B,mBAAS,IAHK,mBAGrD2B,EAHqD,KAGpCC,EAHoC,KAItDC,EAAe,IAAIC,OAAO,eAkB1BC,EAAe,WACnB,OAAOF,EAAaG,KAAKT,IAGrBU,EAAa,WACjB,OAAQN,EAAgBO,SAASX,EAAMY,gBAWzC,OARAhC,qBAAU,YACW,IAAfJ,IACFyB,EAAS,IACTE,EAAgB,IAChBE,EAAmB,OAEpB,CAAC7B,IAGF,eAACe,GAAD,CAAiBsB,SAjCE,SAACC,GACpBA,EAAEC,iBACEP,IACEE,KACFX,EAAWC,EAAMY,eACjBP,EAAmB,GAAD,mBAAKD,GAAL,CAAsBJ,EAAMY,iBAC9CX,EAAS,IACTE,EAAgB,KAEhBA,EAAgB,uCAGlBA,EAAgB,2CAqBlB,UACE,cAACV,GAAD,CACEuB,YAAY,kBACZ1C,MAAO0B,EACPiB,SAAU,SAACH,GAAD,OAAOb,EAASa,EAAEI,OAAO5C,QACnCO,SAAUL,IAEZ,cAACmB,GAAD,qBACkB,KAAjBO,EAAsB,cAACN,GAAD,UAAeM,IAA+B,M,mpCCnF3E,IAAMiB,GAAiBxE,IAAOC,IAAV,MAWdwE,GAAUzE,IAAO0E,GAAV,MAEF,SAACvE,GAAD,MAAkC,QAAtBA,EAAMwE,YAAwB,UAAY,aAM3DC,GAAa5E,IAAO6E,EAAV,MAKVC,GAAkB9E,IAAOyB,OAAV,MAgCN,SAASsD,GAAT,GAKX,IAJFC,EAIC,EAJDA,aACAC,EAGC,EAHDA,gBACAN,EAEC,EAFDA,YACAO,EACC,EADDA,WAEA,OACE,eAACV,GAAD,WACE,cAACC,GAAD,CAASE,YAAaA,EAAtB,SAAoCM,IACpC,eAACL,GAAD,2BAA0BM,EAA1B,OACA,cAACJ,GAAD,CAAiB3C,QAAS6C,EAA1B,2B,6jCClEN,IAAMG,GAAgBnF,IAAOC,IAAV,MAYbmF,GAAQpF,IAAO0E,GAAV,MAQLW,GAAarF,IAAOyB,OAAV,MAiCD,SAAS6D,GAAT,GAA+D,IAA5CN,EAA2C,EAA3CA,aAAcO,EAA6B,EAA7BA,0BAM9C,OACE,eAACJ,GAAD,WACE,cAACC,GAAD,iCACA,cAACC,GAAD,CAAYlD,QARI,WAClBoD,GAA0B,GAC1BP,KAME,qB,wKCvDN,IAAMI,GAAQpF,IAAO0E,GAAV,MAuIIc,OAhIf,WAAgB,IAsBVC,EAtBS,EACyB3D,mBAAS,CAC7C,aACA,OACA,UACA,OACA,WACA,aACA,WACA,UACA,aACA,UACA,WAZW,mBACN4D,EADM,KACOC,EADP,OAc+C7D,oBAAS,GAdxD,mBAcN8D,EAdM,KAckBL,EAdlB,OAeuBzD,mBAAS,IAfhC,mBAeNoD,EAfM,KAeMW,EAfN,OAgB6B/D,mBAAS,IAhBtC,mBAgBNV,EAhBM,KAgBS0E,EAhBT,OAiBqBhE,mBAAS,IAjB9B,mBAiBNd,EAjBM,KAiBK+E,EAjBL,OAkBuBjE,oBAAS,GAlBhC,mBAkBND,EAlBM,KAkBMmE,EAlBN,OAmByBlE,mBAAS,IAnBlC,mBAmBN6C,EAnBM,KAmBOsB,EAnBP,OAoBiCnE,mBAAS,IApB1C,mBAoBNmD,EApBM,KAoBWiB,EApBX,KAqBTC,EAAoBC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAYa,QAGzDvB,EAAe,WACnBmB,EAAoBC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAYa,QAC3DV,EAAcH,EAAYS,GAAmBlC,eAC7C8B,EAAa,IACbC,GAAc,GACdQ,KAGFvE,qBAAU,WACRwD,EAA0B,GAC1B,IAAK,IAAIgB,EAAI,EAAGA,EAAIvB,EAAWqB,OAAQE,IACrChB,EAAwBiB,KAAK,IAE/BZ,EAAiBL,KAChB,CAACP,IAEJ,IAAMsB,EAAoB,WACxB,IAAIG,EAAkB,YAAOjB,GAC7BiB,EAAmBC,OAAOT,EAAmB,GAC7CR,EAAe,YAAIgB,KAoBfE,EAAW,SAACC,GAChBd,GAAc,GACdC,EAAea,IA+BjB,OApBA7E,qBAAU,WACU,IAAdjB,GACF6F,EAAS,UAEV,CAAC7F,IAEJiB,qBAAU,WACJb,EAAc2F,KAAK,MAAQ7B,GAC7B2B,EAAS,SAEV,CAACzF,IAEJa,qBAAU,WAENiE,EADkB,QAAhBvB,EACiB,WAEA,eAEpB,CAACA,IAGF,sBAAKqC,UAAU,MAAf,UACGpB,EACC,cAACN,GAAD,CACEN,aAAcA,EACdO,0BAA2BA,IAG7B,GAEF,cAAC,GAAD,sBACA,cAACxE,EAAD,CAASC,UAAWA,IACpB,cAACG,EAAD,CAAMC,cAAeA,IACrB,cAACsB,EAAD,CACEd,kBAhEoB,SAACe,GACzB,IAAIsE,EAAe,EACnBxB,EAAuB,YAAOrE,GAC9B,IAAK,IAAIqF,EAAI,EAAGA,EAAIvB,EAAWqB,OAAQE,IACjC9D,IAAQuC,EAAWuB,KACrBhB,EAAwBgB,GAAK9D,EAC7BsE,KAIAA,EAAe,EACjBnB,EAAiBL,GAEjBM,EAAa/E,EAAY,IAoDvBa,WAAYA,IAEd,cAACsB,GAAD,CAAWC,WA7CI,SAACC,GACdA,IAAU6B,EACZ2B,EAAS,OAETd,EAAa/E,EAAY,IAyCUa,WAAYA,IAC9CA,EACC,cAACkD,GAAD,CACEC,aAAcA,EACdL,YAAaA,EACbM,gBAAiBA,EACjBC,WAAYA,IAGd,OC/HOgC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.5bed8c69.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledDrawing = styled.div`\r\n  position: relative;\r\n  width: 112px;\r\n  height: 144px;\r\n`;\r\n\r\nconst Base = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 55%;\r\n  max-width: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  height: 4px;\r\n  background-color: black;\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-width 0.75s ease;\r\n`;\r\n\r\nconst Stand = styled.div`\r\n  position: absolute;\r\n  left: calc(27.5% - 2px);\r\n  bottom: 0;\r\n  width: 4px;\r\n  height: 100%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nconst AcrossBeam = styled.div`\r\n  position: absolute;\r\n  top: calc(20% - 6px);\r\n  left: calc(27.5% - 2px);\r\n  width: 4px;\r\n  height: 20%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  transform-origin: top;\r\n  transform: rotate(-135deg);\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: calc(27.5% - 2px);\r\n  height: 4px;\r\n  width: 50%;\r\n  max-width: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-width 0.75s ease;\r\n`;\r\n\r\nconst Noose = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: calc(77.5% - 6px);\r\n  width: 4px;\r\n  height: 20%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nconst Head = styled.div`\r\n  position: absolute;\r\n  z-index: -1;\r\n  top: 20%;\r\n  left: calc(77.5% - 20.5px);\r\n  width: 33px;\r\n  height: 33px;\r\n  border-radius: 50%;\r\n  background-color: white;\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  animation: ${(props) =>\r\n    props.visible ? \"drawCircle 0.2s ease forwards\" : \"\"};\r\n\r\n  @keyframes drawCircle {\r\n    0% {\r\n      box-shadow: 20px -20px 0 4px white, -20px -20px 0 4px white,\r\n        -20px 20px 0 4px white, 20px 20px 0 4px white, 0 0 0px 4px white;\r\n    }\r\n    25% {\r\n      box-shadow: 0px -43px 0 4px white, -20px -20px 0 4px white,\r\n        -20px 20px 0 4px white, 20px 20px 0 4px white, 0 0 0px 4px black;\r\n    }\r\n    50% {\r\n      box-shadow: 0px -43px 0 4px white, -43px 0px 0 4px white,\r\n        -20px 20px 0 4px white, 20px 20px 0 4px white, 0 0 0px 4px black;\r\n    }\r\n    75% {\r\n      box-shadow: 0px -43px 0 4px white, -43px 0px 0 4px white,\r\n        0px 43px 0 4px white, 20px 20px 0 4px white, 0 0 0px 4px black;\r\n    }\r\n    100% {\r\n      box-shadow: 0px -43px 0 4px white, -43px 0px 0 4px white,\r\n        0px 43px 0 4px white, 43px 20px 0 4px white, 0 0 0px 4px black;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Body = styled.div`\r\n  position: absolute;\r\n  top: calc(20% + 36px);\r\n  left: calc(77.5% - 6px);\r\n  width: 4px;\r\n  height: 25%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nconst LeftArm = styled.div`\r\n  position: absolute;\r\n  left: calc(77.5% - 6px);\r\n  top: calc(30% + 34px);\r\n  width: 4px;\r\n  height: 20%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  transform-origin: top;\r\n  transform: rotate(130deg);\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nconst RightArm = styled.div`\r\n  position: absolute;\r\n  left: calc(77.5% - 6px);\r\n  top: calc(30% + 34px);\r\n  width: 4px;\r\n  height: 20%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  transform-origin: top;\r\n  transform: rotate(-130deg);\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nconst LeftLeg = styled.div`\r\n  position: absolute;\r\n  left: calc(77.5% - 6px);\r\n  top: calc(45% + 34px);\r\n  width: 4px;\r\n  height: 22.5%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  transform-origin: top;\r\n  transform: rotate(40deg);\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nconst RightLeg = styled.div`\r\n  position: absolute;\r\n  left: calc(77.5% - 6px);\r\n  top: calc(45% + 34px);\r\n  width: 4px;\r\n  height: 22.5%;\r\n  max-height: ${(props) => (props.visible ? \"100%\" : 0)};\r\n  background-color: black;\r\n  transform-origin: top;\r\n  transform: rotate(-40deg);\r\n  visibility: ${(props) => (props.visible ? \"visible\" : \"hidden\")};\r\n  transition: max-height 0.75s ease;\r\n`;\r\n\r\nexport default function Drawing({ livesLeft }) {\r\n  return (\r\n    <StyledDrawing>\r\n      <Base visible={livesLeft < 11}></Base>\r\n      <Stand visible={livesLeft < 10}></Stand>\r\n      <TopBar visible={livesLeft < 9}></TopBar>\r\n      <AcrossBeam visible={livesLeft < 8}></AcrossBeam>\r\n      <Noose visible={livesLeft < 7}></Noose>\r\n      <Head visible={livesLeft < 6}></Head>\r\n      <Body visible={livesLeft < 5}></Body>\r\n      <LeftArm visible={livesLeft < 4}></LeftArm>\r\n      <RightArm visible={livesLeft < 3}></RightArm>\r\n      <LeftLeg visible={livesLeft < 2}></LeftLeg>\r\n      <RightLeg visible={livesLeft < 1}></RightLeg>\r\n    </StyledDrawing>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledWord = styled.div`\r\n  display: flex;\r\n  margin: 1rem 0;\r\n`;\r\n\r\nconst Letter = styled.div`\r\n  min-width: 20px;\r\n  width: 7vw;\r\n  max-width: 1.4rem;\r\n  height: 1.6rem;\r\n  margin: 0 4px;\r\n  border-bottom: 2px solid black;\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  text-align: center;\r\n`;\r\n\r\nexport default function Word({ currentResult }) {\r\n  return (\r\n    <StyledWord>\r\n      {currentResult.map((letter, index) => (\r\n        <Letter key={index}>{letter}</Letter>\r\n      ))}\r\n    </StyledWord>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledKey = styled.button`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-width: 22px;\r\n  min-height: 22px;\r\n  width: 7vw;\r\n  height: 7vw;\r\n  max-width: 1.9rem;\r\n  max-height: 1.9rem;\r\n  margin: 1vw;\r\n  border: none;\r\n  border-radius: 3px;\r\n  background-color: #e4e4e4;\r\n  font-size: 0.8rem;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n  cursor: pointer;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\r\n    transform: translateY(1px);\r\n  }\r\n\r\n  &:active {\r\n    outline: none;\r\n    box-shadow: none;\r\n    transform: translateY(2px);\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #f2f2f2;\r\n    box-shadow: none;\r\n    transform: translateY(2px);\r\n  }\r\n\r\n  &:disabled::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 90%;\r\n    height: 1px;\r\n    background-color: black;\r\n    transform: rotate(-45deg);\r\n  }\r\n\r\n  @media (min-width: 500px) {\r\n    margin: 5px;\r\n  }\r\n`;\r\n\r\nexport default function Key({ value, checkIfKeyMatches, isGameOver }) {\r\n  const [isKeyDisabled, setIsKeyDisabled] = useState(false);\r\n\r\n  const handleClick = (value) => {\r\n    checkIfKeyMatches(value);\r\n    setIsKeyDisabled(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isGameOver === false) {\r\n      setIsKeyDisabled(false);\r\n    }\r\n  }, [isGameOver]);\r\n\r\n  return (\r\n    <StyledKey disabled={isKeyDisabled} onClick={() => handleClick(value)}>\r\n      {value}\r\n    </StyledKey>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Key from \"./Key\";\r\n\r\nconst firstRowKeys = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\r\nconst secondRowKeys = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\r\nconst thirdRowKeys = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\r\n\r\nconst StyledKeyboard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0.5rem 0;\r\n`;\r\n\r\nconst KeyboardRow = styled.div`\r\n  display: flex;\r\n  &:first-of-type button {\r\n    margin-top: 0;\r\n  }\r\n\r\n  &:last-of-type button {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nexport default function Keyboard({ checkIfKeyMatches, isGameOver }) {\r\n  return (\r\n    <StyledKeyboard>\r\n      <KeyboardRow>\r\n        {firstRowKeys.map((key) => (\r\n          <Key\r\n            isGameOver={isGameOver}\r\n            checkIfKeyMatches={checkIfKeyMatches}\r\n            key={key}\r\n            value={key}\r\n          >\r\n            {key}\r\n          </Key>\r\n        ))}\r\n      </KeyboardRow>\r\n\r\n      <KeyboardRow>\r\n        {secondRowKeys.map((key) => (\r\n          <Key\r\n            isGameOver={isGameOver}\r\n            checkIfKeyMatches={checkIfKeyMatches}\r\n            key={key}\r\n            value={key}\r\n          ></Key>\r\n        ))}\r\n      </KeyboardRow>\r\n\r\n      <KeyboardRow>\r\n        {thirdRowKeys.map((key) => (\r\n          <Key\r\n            isGameOver={isGameOver}\r\n            checkIfKeyMatches={checkIfKeyMatches}\r\n            key={key}\r\n            value={key}\r\n          ></Key>\r\n        ))}\r\n      </KeyboardRow>\r\n    </StyledKeyboard>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledGuessWord = styled.form`\r\n  position: relative;\r\n  display: flex;\r\n  margin: 1.5rem 0;\r\n  border: 2px solid black;\r\n`;\r\n\r\nconst GuessInput = styled.input`\r\n  padding: 0.2rem;\r\n  border: none;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  padding: 0.2rem 0.4rem;\r\n  border: none;\r\n  border-left: 2px solid black;\r\n  background-color: #f5d45d;\r\n  font-size: 0.75rem;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #f7ca28;\r\n  }\r\n`;\r\n\r\nconst ErrorMessage = styled.span`\r\n  position: absolute;\r\n  top: 100%;\r\n  margin-top: 0.25rem;\r\n  font-size: 0.75rem;\r\n  color: red;\r\n`;\r\n\r\nexport default function GuessWord({ checkGuess, isGameOver }) {\r\n  const [guess, setGuess] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [previousGuesses, setPreviousGuesses] = useState([]);\r\n  const inputPattern = new RegExp(\"^[a-zA-Z]+$\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (isGuessValid()) {\r\n      if (isGuessNew()) {\r\n        checkGuess(guess.toUpperCase());\r\n        setPreviousGuesses([...previousGuesses, guess.toUpperCase()]);\r\n        setGuess(\"\");\r\n        setErrorMessage(\"\");\r\n      } else {\r\n        setErrorMessage(\"You have already guessed this word.\");\r\n      }\r\n    } else {\r\n      setErrorMessage(\"Your guess must be made up of letters.\");\r\n    }\r\n  };\r\n\r\n  const isGuessValid = () => {\r\n    return inputPattern.test(guess);\r\n  };\r\n\r\n  const isGuessNew = () => {\r\n    return !previousGuesses.includes(guess.toUpperCase());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isGameOver === false) {\r\n      setGuess(\"\");\r\n      setErrorMessage(\"\");\r\n      setPreviousGuesses([]);\r\n    }\r\n  }, [isGameOver]);\r\n\r\n  return (\r\n    <StyledGuessWord onSubmit={handleSubmit}>\r\n      <GuessInput\r\n        placeholder=\"Have a guess...\"\r\n        value={guess}\r\n        onChange={(e) => setGuess(e.target.value)}\r\n        disabled={isGameOver}\r\n      ></GuessInput>\r\n      <SubmitButton>Submit</SubmitButton>\r\n      {errorMessage !== \"\" ? <ErrorMessage>{errorMessage}</ErrorMessage> : \"\"}\r\n    </StyledGuessWord>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledGameOver = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n`;\r\n\r\nconst Message = styled.h1`\r\n  margin-bottom: 0.25rem;\r\n  color: ${(props) => (props.gameOutcome === \"win\" ? \"#3dc229\" : \"#fa2720\")};\r\n  font-size: 3rem;\r\n  line-height: 1;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst RevealWord = styled.p`\r\n  margin-bottom: 0.7rem;\r\n  color: white;\r\n`;\r\n\r\nconst PlayAgainButton = styled.button`\r\n  position: relative;\r\n  padding: 0.5rem 1rem;\r\n  border: 1px solid black;\r\n  background-color: #f5d45d;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n\r\n  &::after {\r\n    position: absolute;\r\n    right: 0;\r\n    bottom: 0.4rem;\r\n    left: 0;\r\n    content: \"\";\r\n    width: 0;\r\n    height: 2px;\r\n    margin: auto;\r\n    background-color: black;\r\n    transition: width 0.1s linear;\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #f7ca28;\r\n  }\r\n\r\n  &:hover::after,\r\n  &:focus::after {\r\n    width: calc(100% - 2rem);\r\n  }\r\n`;\r\n\r\nexport default function GameOver({\r\n  startNewGame,\r\n  gameOverMessage,\r\n  gameOutcome,\r\n  chosenWord,\r\n}) {\r\n  return (\r\n    <StyledGameOver>\r\n      <Message gameOutcome={gameOutcome}>{gameOverMessage}</Message>\r\n      <RevealWord>The word was {chosenWord}.</RevealWord>\r\n      <PlayAgainButton onClick={startNewGame}>Play Again</PlayAgainButton>\r\n    </StyledGameOver>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledWelcome = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: white;\r\n  z-index: 10;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin-bottom: 1.2rem;\r\n  font-size: 2.5rem;\r\n  line-height: 1;\r\n  letter-spacing: 1px;\r\n  text-align: center;\r\n`;\r\n\r\nconst PlayButton = styled.button`\r\n  position: relative;\r\n  padding: 0.5rem 1.5rem;\r\n  border: 2px solid black;\r\n  background-color: #f5d45d;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n\r\n  &::after {\r\n    position: absolute;\r\n    right: 0;\r\n    bottom: 0.5rem;\r\n    left: 0;\r\n    content: \"\";\r\n    width: 0;\r\n    height: 2px;\r\n    margin: auto;\r\n    background-color: black;\r\n    transition: width 0.1s linear;\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #f7ca28;\r\n  }\r\n\r\n  &:hover::after,\r\n  &:focus::after {\r\n    width: calc(100% - 3rem);\r\n  }\r\n`;\r\n\r\nexport default function Welcome({ startNewGame, setIsWelcomeScreenVisible }) {\r\n  const handleClick = () => {\r\n    setIsWelcomeScreenVisible(false);\r\n    startNewGame();\r\n  };\r\n\r\n  return (\r\n    <StyledWelcome>\r\n      <Title>Welcome to Hangman</Title>\r\n      <PlayButton onClick={handleClick}>Play</PlayButton>\r\n    </StyledWelcome>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport styled from \"styled-components\";\r\nimport Drawing from \"./components/Drawing\";\r\nimport Word from \"./components/Word\";\r\nimport Keyboard from \"./components/Keyboard\";\r\nimport GuessWord from \"./components/GuessWord\";\r\nimport { useEffect, useState } from \"react\";\r\nimport GameOver from \"./components/GameOver\";\r\nimport Welcome from \"./components/Welcome\";\r\n\r\nconst Title = styled.h1`\r\n  margin: 1rem 0;\r\n  font-size: 1.2rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n`;\r\n\r\nfunction App() {\r\n  const [randomWords, setRandomWords] = useState([\r\n    \"population\",\r\n    \"jazz\",\r\n    \"weather\",\r\n    \"park\",\r\n    \"rainfall\",\r\n    \"television\",\r\n    \"shoelace\",\r\n    \"printer\",\r\n    \"restaurant\",\r\n    \"reunion\",\r\n    \"secret\",\r\n  ]);\r\n  const [isWelcomeScreenVisible, setIsWelcomeScreenVisible] = useState(true);\r\n  const [chosenWord, setChosenWord] = useState(\"\");\r\n  const [currentResult, setCurrentResult] = useState([]);\r\n  const [livesLeft, setLivesLeft] = useState(11);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [gameOutcome, setGameOutcome] = useState(\"\");\r\n  const [gameOverMessage, setGameOverMessage] = useState(\"\");\r\n  let indexOfChosenWord = Math.floor(Math.random() * randomWords.length);\r\n  let correctlyGuessedLetters;\r\n\r\n  const startNewGame = () => {\r\n    indexOfChosenWord = Math.floor(Math.random() * randomWords.length);\r\n    setChosenWord(randomWords[indexOfChosenWord].toUpperCase());\r\n    setLivesLeft(11);\r\n    setIsGameOver(false);\r\n    updateRandomWords();\r\n  };\r\n\r\n  useEffect(() => {\r\n    correctlyGuessedLetters = [];\r\n    for (let i = 0; i < chosenWord.length; i++) {\r\n      correctlyGuessedLetters.push(\"\");\r\n    }\r\n    setCurrentResult(correctlyGuessedLetters);\r\n  }, [chosenWord]);\r\n\r\n  const updateRandomWords = () => {\r\n    let updatedRandomWords = [...randomWords];\r\n    updatedRandomWords.splice(indexOfChosenWord, 1);\r\n    setRandomWords([...updatedRandomWords]);\r\n  };\r\n\r\n  const checkIfKeyMatches = (key) => {\r\n    let matchesFound = 0;\r\n    correctlyGuessedLetters = [...currentResult];\r\n    for (let i = 0; i < chosenWord.length; i++) {\r\n      if (key === chosenWord[i]) {\r\n        correctlyGuessedLetters[i] = key;\r\n        matchesFound++;\r\n      }\r\n    }\r\n\r\n    if (matchesFound > 0) {\r\n      setCurrentResult(correctlyGuessedLetters);\r\n    } else {\r\n      setLivesLeft(livesLeft - 1);\r\n    }\r\n  };\r\n\r\n  const gameOver = (result) => {\r\n    setIsGameOver(true);\r\n    setGameOutcome(result);\r\n  };\r\n\r\n  const checkGuess = (guess) => {\r\n    if (guess === chosenWord) {\r\n      gameOver(\"win\");\r\n    } else {\r\n      setLivesLeft(livesLeft - 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (livesLeft === 0) {\r\n      gameOver(\"lose\");\r\n    }\r\n  }, [livesLeft]);\r\n\r\n  useEffect(() => {\r\n    if (currentResult.join(\"\") === chosenWord) {\r\n      gameOver(\"win\");\r\n    }\r\n  }, [currentResult]);\r\n\r\n  useEffect(() => {\r\n    if (gameOutcome === \"win\") {\r\n      setGameOverMessage(\"You Win!\");\r\n    } else {\r\n      setGameOverMessage(\"You Lose!\");\r\n    }\r\n  }, [gameOutcome]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isWelcomeScreenVisible ? (\r\n        <Welcome\r\n          startNewGame={startNewGame}\r\n          setIsWelcomeScreenVisible={setIsWelcomeScreenVisible}\r\n        ></Welcome>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Title>Hangman</Title>\r\n      <Drawing livesLeft={livesLeft}></Drawing>\r\n      <Word currentResult={currentResult}></Word>\r\n      <Keyboard\r\n        checkIfKeyMatches={checkIfKeyMatches}\r\n        isGameOver={isGameOver}\r\n      ></Keyboard>\r\n      <GuessWord checkGuess={checkGuess} isGameOver={isGameOver}></GuessWord>\r\n      {isGameOver ? (\r\n        <GameOver\r\n          startNewGame={startNewGame}\r\n          gameOutcome={gameOutcome}\r\n          gameOverMessage={gameOverMessage}\r\n          chosenWord={chosenWord}\r\n        ></GameOver>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}